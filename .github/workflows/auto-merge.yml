name: Auto Merge with Approval

on:
  pull_request:
    types: [opened, synchronize, review_requested, review_request_removed]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  statuses: write
  checks: write

jobs:
  auto-merge:
    name: Auto Merge Approved PRs
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || (github.event_name == 'issue_comment' && github.event.issue.pull_request)
    
    steps:
    - name: Get PR number
      id: get-pr-number
      run: |
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
        else
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check repository permissions
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üîç Checking repository permissions..."
        
        # Check if we can access the repository
        if gh repo view ${{ github.repository }} > /dev/null 2>&1; then
          echo "‚úÖ Repository access: OK"
        else
          echo "‚ùå Repository access: FAILED"
        fi
        
        # Check if we can view the PR
        if gh pr view ${{ steps.get-pr-number.outputs.pr_number }} > /dev/null 2>&1; then
          echo "‚úÖ PR access: OK"
        else
          echo "‚ùå PR access: FAILED"
        fi
        
        # Check branch protection status
        echo "üîí Checking branch protection..."
        PROTECTION_STATUS=$(gh api repos/${{ github.repository }}/branches/main/protection --jq '.required_status_checks.contexts // []' 2>/dev/null || echo "[]")
        echo "Required status checks: $PROTECTION_STATUS"
        
        # Check current user permissions
        echo "üë§ Current user: $(gh api user --jq '.login')"
        echo "üè¢ Repository owner: ${{ github.repository_owner }}"
      
    - name: Check if PR is approved by admin
      id: check-approval
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Get PR reviews and author info
        REVIEWS=$(gh pr view ${{ steps.get-pr-number.outputs.pr_number }} --json reviews --jq '.reviews[] | select(.state == "APPROVED") | .author.login')
        PR_AUTHOR=$(gh pr view ${{ steps.get-pr-number.outputs.pr_number }} --json author --jq '.author.login')
        
        # Check if any admin has approved
        ADMINS=("reccaller-ai" "${{ github.repository_owner }}" "ishaileshpant")
        APPROVED_BY_ADMIN=false
        
        # Check if PR author is an admin (self-approval allowed for admins)
        for admin in "${ADMINS[@]}"; do
          if [ "$PR_AUTHOR" = "$admin" ]; then
            echo "PR author $PR_AUTHOR is an admin - self-approval allowed"
            APPROVED_BY_ADMIN=true
            break
          fi
        done
        
        # If not self-approved, check for admin reviews
        if [ "$APPROVED_BY_ADMIN" = "false" ]; then
          for admin in "${ADMINS[@]}"; do
            if echo "$REVIEWS" | grep -q "^$admin$"; then
              APPROVED_BY_ADMIN=true
              break
            fi
          done
        fi
        
        echo "approved_by_admin=$APPROVED_BY_ADMIN" >> $GITHUB_OUTPUT
        echo "Reviews: $REVIEWS"
        echo "PR Author: $PR_AUTHOR"
        echo "Approved by admin: $APPROVED_BY_ADMIN"
        
    - name: Check for /approve command
      id: check-approve-command
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Define admin users (same as in approval check)
        ADMINS=("reccaller-ai" "${{ github.repository_owner }}" "ishaileshpant")
        
        # Build regex pattern for admin users
        ADMIN_PATTERN=""
        for admin in "${ADMINS[@]}"; do
          if [ -z "$ADMIN_PATTERN" ]; then
            ADMIN_PATTERN="^$admin$"
          else
            ADMIN_PATTERN="$ADMIN_PATTERN|^$admin$"
          fi
        done
        
        # Get PR comments from admin users only
        COMMENTS=$(gh pr view ${{ steps.get-pr-number.outputs.pr_number }} --json comments --jq ".comments[] | select(.author.login | test(\"$ADMIN_PATTERN\")) | .body")
        
        # Check for /approve command
        if echo "$COMMENTS" | grep -q "/approve"; then
          echo "approve_command_found=true" >> $GITHUB_OUTPUT
        else
          echo "approve_command_found=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Comments with /approve: $(echo "$COMMENTS" | grep "/approve" || echo "None")"
        
    - name: Check CI status
      id: check-ci
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üîç Checking CI status for PR #${{ steps.get-pr-number.outputs.pr_number }}"
        
        # Get PR status checks with proper null handling
        STATUS_CHECKS=$(gh pr view ${{ steps.get-pr-number.outputs.pr_number }} --json statusCheckRollup --jq '.statusCheckRollup // [] | map(select(.context and (.context | test("^(Quick PR Check|Build, Test & Lint)$")))) | map({context: .context, state: .state, conclusion: .conclusion})')
        
        echo "Status checks: $STATUS_CHECKS"
        
        # Check if we have any CI checks
        CHECK_COUNT=$(echo "$STATUS_CHECKS" | jq 'length')
        echo "Found $CHECK_COUNT CI checks"
        
        if [ "$CHECK_COUNT" -eq 0 ]; then
          echo "‚ö†Ô∏è  No CI checks found - assuming checks are passing"
          echo "ALL_CHECKS_PASSING=true" >> $GITHUB_OUTPUT
        else
          # Check if all required CI checks are passing
          ALL_CHECKS_PASSING=true
          FAILED_CHECKS=""
          
          # Check each CI status
          echo "$STATUS_CHECKS" | jq -r '.[] | "\(.context)|\(.state)|\(.conclusion)"' | while IFS='|' read -r context state conclusion; do
            if [ -n "$context" ]; then
              echo "Check $context: state=$state, conclusion=$conclusion"
              
              if [ "$state" != "SUCCESS" ] && [ "$conclusion" != "SUCCESS" ]; then
                echo "‚ùå Check $context is not passing"
                echo "ALL_CHECKS_PASSING=false" >> $GITHUB_OUTPUT
                echo "FAILED_CHECKS=$FAILED_CHECKS $context" >> $GITHUB_OUTPUT
              fi
            fi
          done
          
          # If no failed checks found, all are passing
          if [ -z "$FAILED_CHECKS" ]; then
            echo "ALL_CHECKS_PASSING=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All CI checks are passing"
          else
            echo "‚ùå Some CI checks are failing: $FAILED_CHECKS"
          fi
        fi

    - name: Wait for required CI checks to complete
      if: steps.check-approval.outputs.approved_by_admin == 'true' && steps.check-approve-command.outputs.approve_command_found == 'true' && steps.check-ci.outputs.ALL_CHECKS_PASSING == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "‚è≥ Waiting for required CI checks to complete..."
        
        # Wait for required status checks to complete
        MAX_ATTEMPTS=60  # 10 minutes total
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          # Get all status checks and filter for required ones
          ALL_CHECKS=$(gh pr view ${{ steps.get-pr-number.outputs.pr_number }} --json statusCheckRollup --jq '.statusCheckRollup[]')
          
          # Check Quick PR Check
          BUILD_CHECK=$(echo "$ALL_CHECKS" | jq 'select(.name == "Quick PR Check") | {name: .name, state: .state, conclusion: .conclusion}')
          SECURITY_CHECK=$(echo "$ALL_CHECKS" | jq 'select(.name == "Build, Test & Lint") | {name: .name, state: .state, conclusion: .conclusion}')
          
          echo "Build check: $BUILD_CHECK"
          echo "Security check: $SECURITY_CHECK"
          
          # Check if both required checks are successful
          BUILD_SUCCESS=false
          SECURITY_SUCCESS=false
          
          if [ -n "$BUILD_CHECK" ]; then
            BUILD_STATE=$(echo "$BUILD_CHECK" | jq -r '.state // "PENDING"')
            BUILD_CONCLUSION=$(echo "$BUILD_CHECK" | jq -r '.conclusion // "PENDING"')
            if [ "$BUILD_STATE" = "SUCCESS" ] || [ "$BUILD_CONCLUSION" = "SUCCESS" ]; then
              BUILD_SUCCESS=true
              echo "‚úÖ Quick PR Check is successful"
            else
              echo "‚è≥ Quick PR Check: state=$BUILD_STATE, conclusion=$BUILD_CONCLUSION"
            fi
          else
            echo "‚è≥ Quick PR Check not found yet"
          fi
          
          if [ -n "$SECURITY_CHECK" ]; then
            SECURITY_STATE=$(echo "$SECURITY_CHECK" | jq -r '.state // "PENDING"')
            SECURITY_CONCLUSION=$(echo "$SECURITY_CHECK" | jq -r '.conclusion // "PENDING"')
            if [ "$SECURITY_STATE" = "SUCCESS" ] || [ "$SECURITY_CONCLUSION" = "SUCCESS" ]; then
              SECURITY_SUCCESS=true
              echo "‚úÖ Build, Test & Lint is successful"
            else
              echo "‚è≥ Build, Test & Lint: state=$SECURITY_STATE, conclusion=$SECURITY_CONCLUSION"
            fi
          else
            echo "‚è≥ Build, Test & Lint check not found yet"
          fi
          
          if [ "$BUILD_SUCCESS" = "true" ] && [ "$SECURITY_SUCCESS" = "true" ]; then
            echo "‚úÖ All required CI checks are successful!"
            break
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - waiting 10 seconds..."
          sleep 10
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "‚ùå Timeout waiting for CI checks to complete"
          exit 1
        fi

    - name: Auto merge if conditions met
      if: steps.check-approval.outputs.approved_by_admin == 'true' && steps.check-approve-command.outputs.approve_command_found == 'true' && steps.check-ci.outputs.ALL_CHECKS_PASSING == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üöÄ Auto-merging PR #${{ steps.get-pr-number.outputs.pr_number }}"
        
        # Try multiple merge strategies in order of preference
        MERGE_SUCCESS=false
        
        # Strategy 1: Try gh pr merge with auto flag (respects branch protection)
        echo "üìã Attempting merge with auto flag..."
        if gh pr merge ${{ steps.get-pr-number.outputs.pr_number }} --squash --delete-branch --auto; then
          echo "‚úÖ Merge successful with auto flag"
          MERGE_SUCCESS=true
        else
          echo "‚ùå Auto merge failed, trying admin privileges..."
          
          # Strategy 2: Try gh pr merge with admin privileges
          if gh pr merge ${{ steps.get-pr-number.outputs.pr_number }} --squash --delete-branch --admin; then
            echo "‚úÖ Merge successful with admin privileges"
            MERGE_SUCCESS=true
          else
            echo "‚ùå Admin merge failed, trying GitHub API..."
            
            # Strategy 3: Try GitHub API merge
            if gh api repos/${{ github.repository }}/pulls/${{ steps.get-pr-number.outputs.pr_number }}/merge \
              --method PUT \
              --field merge_method=squash \
              --field commit_title="${{ github.event.pull_request.title || github.event.issue.title }}" \
              --field commit_message="Auto-merged via /approve command"; then
              echo "‚úÖ Merge successful with GitHub API"
              MERGE_SUCCESS=true
            else
              echo "‚ùå GitHub API merge failed, trying basic merge..."
              
              # Strategy 4: Try basic merge without flags
              if gh pr merge ${{ steps.get-pr-number.outputs.pr_number }} --squash --delete-branch; then
                echo "‚úÖ Merge successful with basic merge"
                MERGE_SUCCESS=true
              else
                echo "‚ùå All merge strategies failed"
              fi
            fi
          fi
        fi
        
        # Provide feedback based on merge result
        if [ "$MERGE_SUCCESS" = "true" ]; then
          echo "üéâ PR merged successfully!"
          gh pr comment ${{ steps.get-pr-number.outputs.pr_number }} --body "‚úÖ **PR merged successfully!** Auto-merged via /approve command."
        else
          echo "‚ö†Ô∏è  Auto-merge failed - manual intervention required"
          gh pr comment ${{ steps.get-pr-number.outputs.pr_number }} --body "‚ö†Ô∏è **Auto-merge failed** - The PR meets all conditions but couldn't be merged automatically due to permissions. Please merge manually or check repository settings.\n\n**Conditions met:**\n- ‚úÖ Admin approval\n- ‚úÖ /approve command\n- ‚úÖ All CI checks passing\n\n**Possible solutions:**\n1. Check branch protection settings\n2. Verify GitHub Actions permissions\n3. Merge manually"
        fi
        
    - name: Comment if conditions not met
      if: steps.check-approval.outputs.approved_by_admin == 'false' || steps.check-approve-command.outputs.approve_command_found == 'false' || steps.check-ci.outputs.ALL_CHECKS_PASSING == 'false'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "‚è≥ Auto-merge conditions not met"
        
        # Build status message
        STATUS_MESSAGE="‚è≥ **Auto-merge pending conditions:**\n\n"
        
        if [ "${{ steps.check-approval.outputs.approved_by_admin }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] Admin approval required\n"
          echo "‚ùå Missing admin approval"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] Admin approval ‚úÖ\n"
        fi
        
        if [ "${{ steps.check-approve-command.outputs.approve_command_found }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] Admin must comment \`/approve\` to enable auto-merge\n"
          echo "‚ùå Missing /approve command from admin"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] /approve command ‚úÖ\n"
        fi
        
        if [ "${{ steps.check-ci.outputs.ALL_CHECKS_PASSING }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] All CI checks must pass\n"
          echo "‚ùå CI checks are failing"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] All CI checks passing ‚úÖ\n"
        fi
        
        STATUS_MESSAGE="${STATUS_MESSAGE}\nOnce all conditions are met, this PR will be automatically merged! üöÄ"
        
        gh pr comment ${{ steps.get-pr-number.outputs.pr_number }} --body "$STATUS_MESSAGE"

  cleanup:
    name: Cleanup merged branches
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: Delete feature branch
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üßπ Cleaning up merged branch: ${{ github.head_ref }}"
        gh pr view ${{ github.event.pull_request.number }} --json headRefName --jq '.headRefName' | xargs -I {} gh api repos/${{ github.repository }}/git/refs/heads/{} -X DELETE
        echo "‚úÖ Branch deleted successfully"
