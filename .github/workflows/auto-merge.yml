name: Auto Merge with Approval

on:
  pull_request:
    types: [opened, synchronize, review_requested, review_request_removed]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge:
    name: Auto Merge Approved PRs
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if PR is approved by admin
      id: check-approval
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Get PR reviews and author info
        REVIEWS=$(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '.reviews[] | select(.state == "APPROVED") | .author.login')
        PR_AUTHOR=$(gh pr view ${{ github.event.pull_request.number }} --json author --jq '.author.login')
        
        # Check if any admin has approved
        ADMINS=("reccaller-ai" "${{ github.repository_owner }}" "ishaileshpant")
        APPROVED_BY_ADMIN=false
        
        # Check if PR author is an admin (self-approval allowed for admins)
        for admin in "${ADMINS[@]}"; do
          if [ "$PR_AUTHOR" = "$admin" ]; then
            echo "PR author $PR_AUTHOR is an admin - self-approval allowed"
            APPROVED_BY_ADMIN=true
            break
          fi
        done
        
        # If not self-approved, check for admin reviews
        if [ "$APPROVED_BY_ADMIN" = "false" ]; then
          for admin in "${ADMINS[@]}"; do
            if echo "$REVIEWS" | grep -q "^$admin$"; then
              APPROVED_BY_ADMIN=true
              break
            fi
          done
        fi
        
        echo "approved_by_admin=$APPROVED_BY_ADMIN" >> $GITHUB_OUTPUT
        echo "Reviews: $REVIEWS"
        echo "PR Author: $PR_AUTHOR"
        echo "Approved by admin: $APPROVED_BY_ADMIN"
        
    - name: Check for /approve command
      id: check-approve-command
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Define admin users (same as in approval check)
        ADMINS=("reccaller-ai" "${{ github.repository_owner }}" "ishaileshpant")
        
        # Build regex pattern for admin users
        ADMIN_PATTERN=""
        for admin in "${ADMINS[@]}"; do
          if [ -z "$ADMIN_PATTERN" ]; then
            ADMIN_PATTERN="^$admin$"
          else
            ADMIN_PATTERN="$ADMIN_PATTERN|^$admin$"
          fi
        done
        
        # Get PR comments from admin users only
        COMMENTS=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq ".comments[] | select(.author.login | test(\"$ADMIN_PATTERN\")) | .body")
        
        # Check for /approve command
        if echo "$COMMENTS" | grep -q "/approve"; then
          echo "approve_command_found=true" >> $GITHUB_OUTPUT
        else
          echo "approve_command_found=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Comments with /approve: $(echo "$COMMENTS" | grep "/approve" || echo "None")"
        
    - name: Check CI status
      id: check-ci
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üîç Checking CI status for PR #${{ github.event.pull_request.number }}"
        
        # Get PR status checks with proper null handling
        STATUS_CHECKS=$(gh pr view ${{ github.event.pull_request.number }} --json statusCheckRollup --jq '.statusCheckRollup // [] | map(select(.context and (.context | test("^(Build, Test & Lint|Security Scan)$")))) | map({context: .context, state: .state, conclusion: .conclusion})')
        
        echo "Status checks: $STATUS_CHECKS"
        
        # Check if we have any CI checks
        CHECK_COUNT=$(echo "$STATUS_CHECKS" | jq 'length')
        echo "Found $CHECK_COUNT CI checks"
        
        if [ "$CHECK_COUNT" -eq 0 ]; then
          echo "‚ö†Ô∏è  No CI checks found - assuming checks are passing"
          echo "ALL_CHECKS_PASSING=true" >> $GITHUB_OUTPUT
        else
          # Check if all required CI checks are passing
          ALL_CHECKS_PASSING=true
          FAILED_CHECKS=""
          
          # Check each CI status
          echo "$STATUS_CHECKS" | jq -r '.[] | "\(.context)|\(.state)|\(.conclusion)"' | while IFS='|' read -r context state conclusion; do
            if [ -n "$context" ]; then
              echo "Check $context: state=$state, conclusion=$conclusion"
              
              if [ "$state" != "SUCCESS" ] && [ "$conclusion" != "SUCCESS" ]; then
                echo "‚ùå Check $context is not passing"
                echo "ALL_CHECKS_PASSING=false" >> $GITHUB_OUTPUT
                echo "FAILED_CHECKS=$FAILED_CHECKS $context" >> $GITHUB_OUTPUT
              fi
            fi
          done
          
          # If no failed checks found, all are passing
          if [ -z "$FAILED_CHECKS" ]; then
            echo "ALL_CHECKS_PASSING=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All CI checks are passing"
          else
            echo "‚ùå Some CI checks are failing: $FAILED_CHECKS"
          fi
        fi

    - name: Auto merge if conditions met
      if: steps.check-approval.outputs.approved_by_admin == 'true' && steps.check-approve-command.outputs.approve_command_found == 'true' && steps.check-ci.outputs.ALL_CHECKS_PASSING == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üöÄ Auto-merging PR #${{ github.event.pull_request.number }}"
        
        # Enable auto-merge using GitHub API
        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge \
          --method PUT \
          --field merge_method=squash \
          --field commit_title="${{ github.event.pull_request.title }}" \
          --field commit_message="Auto-merged via /approve command"
        
        # Add comment
        gh pr comment ${{ github.event.pull_request.number }} --body "‚úÖ **Auto-merge enabled!** This PR will be automatically merged once all checks pass."
        
    - name: Comment if conditions not met
      if: steps.check-approval.outputs.approved_by_admin == 'false' || steps.check-approve-command.outputs.approve_command_found == 'false' || steps.check-ci.outputs.ALL_CHECKS_PASSING == 'false'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "‚è≥ Auto-merge conditions not met"
        
        # Build status message
        STATUS_MESSAGE="‚è≥ **Auto-merge pending conditions:**\n\n"
        
        if [ "${{ steps.check-approval.outputs.approved_by_admin }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] Admin approval required\n"
          echo "‚ùå Missing admin approval"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] Admin approval ‚úÖ\n"
        fi
        
        if [ "${{ steps.check-approve-command.outputs.approve_command_found }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] Admin must comment \`/approve\` to enable auto-merge\n"
          echo "‚ùå Missing /approve command from admin"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] /approve command ‚úÖ\n"
        fi
        
        if [ "${{ steps.check-ci.outputs.ALL_CHECKS_PASSING }}" == "false" ]; then
          STATUS_MESSAGE="${STATUS_MESSAGE}- [ ] All CI checks must pass\n"
          echo "‚ùå CI checks are failing"
        else
          STATUS_MESSAGE="${STATUS_MESSAGE}- [x] All CI checks passing ‚úÖ\n"
        fi
        
        STATUS_MESSAGE="${STATUS_MESSAGE}\nOnce all conditions are met, this PR will be automatically merged! üöÄ"
        
        gh pr comment ${{ github.event.pull_request.number }} --body "$STATUS_MESSAGE"

  cleanup:
    name: Cleanup merged branches
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: Delete feature branch
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üßπ Cleaning up merged branch: ${{ github.head_ref }}"
        gh pr view ${{ github.event.pull_request.number }} --json headRefName --jq '.headRefName' | xargs -I {} gh api repos/${{ github.repository }}/git/refs/heads/{} -X DELETE
        echo "‚úÖ Branch deleted successfully"
